import gatt
from multiprocessing.connection import Client, Listener
import notify2
from gi.repository import GLib
import re
import requests
import json
import sqlite3
import struct
import base64
from ANCSParser import Notification
import sys
import select
import datetime, threading, time

def something(line):
    data = json.loads(line)
    print(data)
    sys.stdout.flush()
    if data["action"] == "remove":
       AnyDevice.performNegativeAction(AnyDevice,data["notificationID"])

def something_else():
    pass

def readStdin():
    while sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
        line = sys.stdin.readline()
        if line:
            something(line)
        else: # an empty line means stdin has been closed
             print('eof')
             sys.stdin.flush()
             exit(0)
    else:
        something_else()

next_call = time.time()

def stdinThread():
  global next_call
  readStdin()
  next_call = next_call+0.1
  threading.Timer( next_call - time.time(), stdinThread ).start()

stdinThread()




SYSTEM_BUNDLEID = {
    "com.apple.AppStore":["App Store",  "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"],

    "com.apple.camera":["Camera", "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAC+0lEQVR4nO2az2oTURjFfwubJmbZGroWxYWatItCH8disA9QLPgatpIuXLfYhUEQXIgirlyI6KYlqfoIjU20ppvExTdTJCS5N5nvzr0hc+BASeHknDNz/8zNQIYMGTIkRxl4B3SBvmN2gbfA3VSSWeAW8Av3wQd5BtxMIZ8Rb0g/fMzXKeQbi3v4Cx/T61DYG2EqTT51nnIEisC5hUHXbAEFx1mHojqFWVd84DbqcHyewqgrfkoa5g5QB9oBhHHN38CrKPNV+FYAxtJmKy6hHoAZX6zDfNz2o9ghABO+6d2Ab3o34JveDfhmal/UBg6QHeQ6sATkIi5Hn1WBQ9KdmJ1/QQPYZLL9+nXgIXA6ywVcANvAtQmCD2IBeAz8nbUCmug+p5eB77NSwBfghmL4GCXga+gFNB2Fj1FC/05QE/pDOsdTZXTnBDWhbYehB7Gj6FtFpIH9bL8G7CPD5TJiA6gBFUuNBfSGgorIpoXpAvDcoNOLyslb6GkdySUWOMe8ySkAHyfQ/GBRQhF5nPVewIHBKJiv/DDWLHRfhFBA1WBybUrdHuY5YSuEAtYNJvcTaD8zaG+EUMCSwWQzgfaJQbsUQgE5g8nLBNpdg/ZiVkAABSwbTDYSaB8btIMYAqZJsJZAe9egHcQkaFoGK8iSNqluD7hv0A5iGTw0mITplsI9C92jEApoI2d445BHtre2mu+RCW4cisgPnd4L6CMHmCbkkTth3HDoIVfeFB7gkZJ3FZFT5BHVBhVkh3eCLHNdZLbfxTzmY+SAHyEV0EdOb9PCE0XfakIX2F/BJFhF94VMNaE+ckpTchYdVoCfyp5VxfrI0bWLElaAbw78qgvGd0JZMfwq+lfeaQF95Oh6B/vVYRhyyITn8iVsZ8L/3w1VZONiiyKyzmstdV4LiNlBzvC2kIeYErLhWYz+3oj+d4TODi+4AkKldwO+6d2Ab3o34JupTjihsQPy4rBvI774Eub3Zekz4DYR4tflNX5sDJ0d5Mpfhc+QIcP84h+yDJDLMhz/GgAAAABJRU5ErkJggg=="],


    "com.apple.mobiletimer":["Clock","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"],



    "com.apple.mobilephone":["Phone","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"],



    "com.apple.mobileslideshow":["Photos","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"],




    "com.apple.mobilesafari":["Safari","iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAFmklEQVR4nOWbbWxTVRjH/93GEhNXWEdHfDfAV4NzA0Qx+kmDGiOZIyGo2SBGw0IIDkw0GWwqiMQRjfGT4pxumnvavTRm1SEvRofRIQM2wU9uIu8MLpYAZgP698NpoV1719713nsu4Un+SdOXc87v6Tn3nvs8zwHsth6WIshKCK6HYBsC3AvBYQieg+BYTOcgOBz7rA2C6xFkJXpYavv4LDfSgxArEORWCA5CkDlqEEFuRYgVID2q8YwtTC80roXgYQugjXQYGtciTK9q3Bsm6INgIwI8byN4smRfjRD0qQMn86BxOQI86xh4qkbQwRqQec7CC86GYK9C8PHqRSdnOQOvcQkCvOAC6PGKIMAq+8DJPAg2uQA0k5qsXxKChQjyaxfAZas2CBZaBy/Y7QIos+rO3Qlk3k32z6fOhJyWw82x5pPk0aLj32uaHLzGJaphzKioJcJn1nUaff6C2X9+tktvdWk15/19FGWLeHvLBaPvRLLfJ8jbnZs2ORPqleUf88htXj6wZX+m7/Zmdz3oYI1qqGzk/eJftsyvpA5wxYpPsv1ddaap71O8t89KZe/tZf+MmdQBNi+oMvPbEbSxeCIHNKqGy6TXqj/kqYJC6gD7Z8xkUUvEXBsaG9LDh+l19JHWpKY16/xq7vPUAeoATxUU8sHNv0+mLR29LEp1gAxmKAdNp/KNv/Kg/77r8DrAV2s+mnyb7axLhic9sDeSMyl5tChrX/qAp/OnJMF/OW9xrm0fSg6vhVihGna8ij8/x2/Kn00C1wEe8N/Pqc3nreij/IYDZABTOXRc897Zw8GSe1LgT+dP4UObfrOmnyC3Jl79rYje5iyPFuXqZZt5Jr8gBV4HuPLlJiv7G5DwPSxVDQ5BlmwboShblBZcB9hW8Zwd/foRS1oohV/Q+BMP+e4yhB+Yfi+nNevW9x1kJSAzNkrAPVqUry/dyJG8fEP4M/kFnPvuL/aMQWM9IMNHjsP7Pz3N9jlPGoLHterFLfaNQ2MrYvk4R+EXbtjNP4vvyAivlT2dLsBhpfoAmah0DP6J3WS4tjEj/B8ld9O37azd4xkCZGbWEfjSEHniP5Ikv1u5YcJ1//DbP9s/pgDPAjI9bXtnHkH2nGKSGTlhzdJNTs3IUccc8NYg09p4JwTnPGX3uk9xgO1L4LFd5NVoegckOuFw8Z2c/tkZp+CvL4FhOzuZHiKPXTaGj1u4tpGPNvzoHLzUkK23QY8gwyczwx+/TD6+21HwuPps3Qi9cTAz/PcnSX9ICXxsI2TTVviRneSVCdb91Sj55oCcJUrgpQPqbXkY8nWR/1wyhj96mVy4SyF4XEFWWv447BHktyeM4btPkCVdLoCX8lseEKk7kB78SpRcd1DxlE/WgOUhsfk7yLFrqfBHLpELdioHTlZSSMyCoGhxF/l3mnUfOi6vCcqBU5UQFLUgLN51PBl87Bq55oBySCMdSq06zSExsnp/MvzwRXLeDuWQxkpJjOSQGqv4gRxNWPcdx8hpnS6ANJZBakzeDUwlR6d2kkMXJfjoNXJVv3K4zDJMjkoH+CA4km1jwaMS/q+LciYoh8usDOlxIOsCidp+CR84KmeCC+CyUfXE8EBWJTJl28nIGLlyn3IgM8qyRAYAOjkLgpF0DXk75SNu2XblQGZkokgqbgFWpWts8R6yqEM5kFmZLJOL27hCSRft481okoWSQPx6oCRzZIk0tuZeOX5LF0snOuHmKpq2sFw+brf0gYlEC7DKpXXEEUz6am/W5D7BTfXEDh6aihuZhw7WKD82J1jt/LG5RGtjMTQ2OFxlqkNjQ+YHGyctTC/aWQe7j862s874ed4NJsNr5bFA64AF0AOxtsrdfXjayAT9CLISGuuhsRWCfRAcil07RiE4Gns9BME+aGyFxvpYwsZv9/D+B9v6a7IqkCVNAAAAAElFTkSuQmCC"],




    "com.apple.Preferences":["Settings","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"],



    "com.apple.weather":["Weather","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"],


    "com.apple.MobileSMS":["SMS", "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"]
}

try:
    sqliteConnection = sqlite3.connect('cache.db')
    cursor = sqliteConnection.cursor()

    sqlite_select_Query = "select sqlite_version();"
    cursor.execute(sqlite_select_Query)
    record = cursor.fetchall()

    sqlite_create_table_query = '''CREATE TABLE cachemeta (
                                bundleId TEXT PRIMARY KEY,
                                appname TEXT NOT NULL,
                                base64img TEXT NOT NULL,
                                filename TEXT NOT NULL);'''

    cursor.execute(sqlite_create_table_query)
    sqliteConnection.commit()

    for b, n in SYSTEM_BUNDLEID.items():
        sqlite_insert_query = "INSERT INTO cachemeta (bundleId, appname, base64img, filename) VALUES (?, ?, ?, ?)"
        count = cursor.execute(sqlite_insert_query,(b, n[0], n[1], n[0] + ".png"))
        sqliteConnection.commit()


    cursor.close()

except sqlite3.Error as error:
    pass
    #print("Error while connecting to sqlite", error)
finally:
    if (sqliteConnection):
        sqliteConnection.close()

def clean_up_text(text):
    return text.replace("\\n", "\n").replace("\\t", "\t")

class NotifySendPy:
    def __init__(self, loop=None):
        self.loop = loop or GLib.MainLoop()

    def close(self, n):
        self.loop.quit()

    def action(self, n, text):
        notificationActionPress(text, n)
        self.loop.quit()

    def notify(
        self,
        summary,
        body=None,
        *,
        actions=None,
        app_name=None,
        category=None,
        expirey=None,
        hints=None,
        icon=None,
        replaces_id=None,
        replaces_process=None,
        urgency=None,
    ):
        summary = clean_up_text(summary)
        body = clean_up_text(body or "")
        notify2.init(app_name or "", 'glib')
        if icon and body:
            n = notify2.Notification(summary, message=body, icon=icon)
        elif icon:
            n = notify2.Notification(summary, icon=icon)
        elif body:
            n = notify2.Notification(summary, message=body)
        else:
            n = notify2.Notification(summary)

        if urgency == "low":
            n.set_urgency(notify2.URGENCY_LOW)
        elif urgency == "normal":
            n.set_urgency(notify2.URGENCY_NORMAL)
        elif urgency == "critical":
            n.set_urgency(notify2.URGENCY_CRITICAL)
        elif urgency is not None:
            print("urgency must be low|normal|critical")
            exit()

        if expirey:
            try:
                n.set_timeout(int(expirey))
            except ValueError:
                print("expire-time must be integer")
                exit()

        if category:
            n.set_category(category)

        if hints:
            for hint in hints:
                try:
                    hintparts = hint.split(':')
                    hint_type = hintparts[0]
                    key = hintparts[1]
                    value = ':'.join(hintparts[2:])

                    if hint_type == "boolean":
                        if (value == "True") or (value == "true"):
                            n.set_hint(key, True)
                        else:
                            if (value == "False") or (value == "false"):
                                n.set_hint(key, False)
                            else:
                                print("valid types for boolean are: True|true|False|false")
                                exit()
                    if hint_type == "int":
                        n.set_hint(key, int(value))
                    if hint_type == "string":
                        n.set_hint(key, value)
                    if hint_type == "byte":
                        n.set_hint_byte(key, int(value))
                except ValueError:
                    print("hint has to be in the format TYPE:KEY:VALUE")
                    exit()

        if replaces_id is not None:
            try:
                n.id = int(replaces_id)
            except ValueError:
                print("replaces-id has to be an integer")
                exit()

        if actions:
            n.connect("closed", self.close)
            for action in actions:
                [key, value] = action.split(':')
                n.add_action(key, value, self.action)

        if replaces_process:
            # address = ('localhost', 6000)
            try:
                with open('/tmp/notify-send.py.address', 'r') as pidf:
                    conn = Client(pidf.read())
                    conn.send([n, replaces_process])
                    conn.close()
            except Exception:
                listener = Listener()
                with open('/tmp/notify-send.py.address', 'w') as pidf:
                    pidf.write(listener.address)
                replaces_processes = {}
                n.show()
                replaces_processes[replaces_process] = n.id
                # stuff
                while True:
                    conn = listener.accept()
                    [n, replaces_process] = conn.recv()
                    if replaces_process in replaces_processes:
                        n.id = replaces_processes[replaces_process]
                    n.show()
                    replaces_processes[replaces_process] = n.id
                    conn.close()
        else:
            return n


manager = gatt.DeviceManager(adapter_name='hci0')
control_point_characteristic = None
notification_queue = None
notification_osd_mapping = {}

def notificationActionPress(action, n):
    nid = notification_osd_mapping[n.id]
    if "negative_action" in action:
        AnyDevice.performNegativeAction(AnyDevice,nid)
    else:
        AnyDevice.performPositiveAction(AnyDevice,nid)

class AnyDevice(gatt.Device):
    def services_resolved(self):
        super().services_resolved()

        ancs_service = next(
            s for s in self.services
            if s.uuid == '7905f431-b5ce-4e99-a40f-4b1e122d00d0')

        notification_source_characteristic = next(
            c for c in ancs_service.characteristics
            if c.uuid == '9fbf120d-6301-42d9-8c58-25e699a21dbd')
        global control_point_characteristic
        control_point_characteristic = next(
            c for c in ancs_service.characteristics
            if c.uuid == '69d1d8f3-45e1-49a8-9821-9bbdfdaad9d9')
        data_source_characteristic = next(
            c for c in ancs_service.characteristics
            if c.uuid == '22eac6e9-24d6-4bb5-be44-b36ace7c7bfb')


        notification_source_characteristic.enable_notifications()
        data_source_characteristic.enable_notifications()



    def characteristic_value_updated(self, characteristic, value):

        if characteristic.uuid == '9fbf120d-6301-42d9-8c58-25e699a21dbd':
            notification = Notification(value, False)
            nid, flags = notification.getNotificationAttributes()
            event_id_remove = notification.getEventId()
        if control_point_characteristic is not None and characteristic.uuid != '22eac6e9-24d6-4bb5-be44-b36ace7c7bfb' and  "preexisting" not in flags:
            if event_id_remove == 2:
                rem_not = {"notification_id": str(nid)  ,"event_id":"remove"}
                print(json.dumps(rem_not))
                sys.stdout.flush()
                return
            command = struct.pack("<BIBBHBHBHBBBB", 0, nid , 0, 1, 65535, 2, 65535, 3, 65535, 4, 5, 6, 7)
            control_point_characteristic.write_value(bytes(command))

        if characteristic.uuid == '22eac6e9-24d6-4bb5-be44-b36ace7c7bfb':
            notification = Notification(value, True)
#            notification_src_id, app_id, title, subtitle, message, message_size, date, positive_action_label, negative_action_label = notification.getNotificationSourceAttributes()
            notification_attributes_json = notification.getNotificationSourceAttributes()
            notification_queue = notification_attributes_json
            notification_data = json.dumps(list(notification_attributes_json.items())[-1])
            notification_data = json.loads(notification_data)
            action_emoji = None
            action_emoji_pos = None
            action_emoji_neg = None
            notification_actions = None
            print(json.dumps(notification_data))
            sys.stdout.flush()

            if len(notification_data[1]["event_flags"]) == 1:
                if notification_data[1]["event_flags"][0] == "negative_action":
                    if notification_data[1]["data"][0]["negative_action_label"] == "Decline":
                        action_emoji = "📵 " + notification_data[1]["data"][0]["negative_action_label"]
                    else:
                        action_emoji = "❌ " + notification_data[1]["data"][0]["negative_action_label"]
                    action_string = notification_data[1]["event_flags"][0] + ":" + action_emoji
                    notification_actions = [action_string]
                else:
                    action_emoji = "🔔 " + notification_data[1]["data"][0]["positive_action_label"]
                    action_string = notification_data[1]["event_flags"][0] + ":" + action_emoji
                    notification_actions = [action_string]

            else:
                if notification_data[1]["data"][0]["negative_action_label"] == "End Call":
                    action_emoji = "📵 " + notification_data[1]["data"][0]["negative_action_label"]
                    action_string = notification_data[1]["event_flags"][1] + ":" + action_emoji
                    notification_actions = [action_string]

                if notification_data[1]["data"][0]["positive_action_label"] == "Answer" or notification_data[1]["data"][0]["positive_action_label"] == "Dial":
                    action_emoji_pos = "📞 " + notification_data[1]["data"][0]["positive_action_label"]
                    action_emoji_neg = "❌  " + notification_data[1]["data"][0]["negative_action_label"]
                    action_string_pos = "positive_action" + ":" + action_emoji_pos
                    action_string_neg = "negative_action" + ":" + action_emoji_neg
                    notification_actions = [action_string_pos, action_string_neg]
            imgdata = base64.b64decode(notification_data[1]["data"][0]["app_icon_base64"])
            icon_filename = "/tmp/" + notification_data[1]["data"][0]["app_icon_name"]
            with open(icon_filename, 'wb') as f:
                f.write(imgdata)
            n = NotifySendPy().notify(
                summary=notification_data[1]["data"][0]["title"],
                body=notification_data[1]["data"][0]["subtitle"] + "\n" + notification_data[1]["data"][0]["message"],
                actions=notification_actions,
                app_name=notification_data[1]["data"][0]["app_name"],
                category=notification_data[1]["category"],
                expirey=False,
                hints=False,
                icon=icon_filename,
                replaces_id=False,
                replaces_process=False,
                urgency="critical",
            )

            if n.id is not None:
                n.show()
                notification_osd_mapping.update({n.id:notification_data[0]})




    # def characteristic_write_value_failed(self, characteristic, error):
    #     print("characteristic: ", characteristic.uuid)
    #     print("error: ", error)


    def performNegativeAction(self, notificationId):
        command = struct.pack("<BIB", 2, int(notificationId), 1)
        control_point_characteristic.write_value(bytes(command))

    def performPositiveAction(self, notificationId):
        command = struct.pack("<BIB", 2, int(notificationId), 0)
        control_point_characteristic.write_value(bytes(command))

device = AnyDevice(mac_address='14:bd:61:de:81:a1', manager=manager)
device.connect()
readStdin()
manager.run()
